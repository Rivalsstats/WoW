name: WoW M+ Data Collector

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # every 6 hours

jobs:
  collect-data:
    runs-on: ubuntu-latest

    env:
      BLIZ_CLIENT_ID: ${{ secrets.BLIZ_CLIENT_ID }}
      BLIZ_CLIENT_SECRET: ${{ secrets.BLIZ_CLIENT_SECRET }}
      REGIONS: 'us,eu,kr,tw'
      LOCALE: 'en_US'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch all branches
        run: |
         git fetch --prune origin '+refs/heads/*:refs/remotes/origin/*'

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install aiohttp aiolimiter asyncio

      - name: Create runs & region folders
        run: |
          mkdir -p data/runs
          for region in $(echo $REGIONS | tr ',' ' '); do
            mkdir -p data/runs/$region
            mkdir -p data/$region
          done

      - name: Run data collector
        run: |
          python backend_scripts/collectLeaderboardData.py
      
      - name: Commit runs history to main
        shell: bash
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git add data/runs
          if ! git diff --cached --quiet; then
            git commit -m "Update seen‐runs history"
            # bring in any new commits from origin/main
            git fetch origin main
            git rebase origin/main
            # now push our rebased change
            git push origin HEAD:main
          else
            echo "No changes to data/runs"
          fi


      - name: Commit & split per–realm branches (via worktrees)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          
          ROOT=$(pwd)
          BASE=origin/main
          
          git worktree prune
          
          for region in $(echo $REGIONS | tr ',' ' '); do
            if compgen -G "data/$region/*" > /dev/null; then
              find data/$region -mindepth 1 -maxdepth 1 -type d | while read realm_path; do
                region=$(basename $(dirname "$realm_path"))
                realm=$(basename "$realm_path")
                branch="${region}-${realm}"
                WT_DIR="${ROOT}/.wt-${branch}"
                
                echo "→ Updating branch $branch"
                rm -rf "$WT_DIR"
                if   git show-ref --verify --quiet "refs/heads/$branch"; then
                  git worktree add --force "$WT_DIR" "$branch"
                elif git show-ref --verify --quiet "refs/remotes/origin/$branch"; then
                  git worktree add --force "$WT_DIR" "origin/$branch"
                else
                  git worktree add --force -b "$branch" "$WT_DIR" "$BASE"
                  ( cd "$WT_DIR" && git push --set-upstream origin HEAD:"$branch" )
                fi

                # ─── snapshot old headers ───
                declare -A OLD_HDR
                pushd "$WT_DIR" >/dev/null
                  while IFS= read -r csv; do
                    OLD_HDR["$csv"]="$(head -n1 "$csv")"
                  done < <(find data/$region/$realm -type f -name runs.csv)
                popd >/dev/null

                # ─── copy the new realm data (including fresh runs.csv) ───
                pushd "$WT_DIR" >/dev/null
                  mkdir -p "$realm_path"
                  cp -r "$ROOT/$realm_path/." "$realm_path/"

                  # ─── for each runs.csv, rewrite in-place ───
                  while IFS= read -r csv; do
                    # if we have an old header, use it, else first line of new
                    hdr="${OLD_HDR[$csv]:-$(head -n1 "$csv")}"
                    # rebuild: old header + new data rows (skip new header)
                    {
                      printf '%s\n' "$hdr"
                      tail -n +2 "$csv"
                    } > "${csv}.tmp"
                    mv "${csv}.tmp" "$csv"
                  done < <(find data/$region/$realm -type f -name runs.csv)

                  git add "$realm_path"
                  git add data/$region/$realm/**/*.csv

                  if ! git diff --cached --quiet; then
                    git commit -m "Update M+ data for $branch"
                    git push --force-with-lease origin HEAD:"$branch"
                  else
                    echo "No changes for $branch"
                  fi
                popd >/dev/null

                git worktree remove --force "$WT_DIR"
              done
            else
              echo "→ no realm data under data/$region, skipping"
            fi
          done